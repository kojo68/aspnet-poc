name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    # ───────── Clonage ─────────
    - uses: actions/checkout@v4

    # ───────── SDK .NET (9 preview ici, change si tu repasses en 8) ─────────
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        dotnet-quality: 'preview'

    # ───────── Restore & build ─────────
    - name: Restore & Build
      run: |
        dotnet restore Api/Api.csproj
        dotnet build  Api/Api.csproj -c Release --no-restore

    # ───────── Tests + couverture Cobertura ─────────
    - name: Run Tests with coverage
      run: |
        dotnet test tests/Api.Tests/Api.Tests.csproj \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults

    # ───────── Installer ReportGenerator ─────────
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool --prerelease

    # ───────── Convertir Cobertura → OpenCover ─────────
    - name: Convert coverage to OpenCover
      run: |
        export PATH="$PATH:$HOME/.dotnet/tools"
        REPORT=$(find TestResults -type f -name 'coverage.cobertura.xml' | head -n 1)
        echo "Cobertura file : $REPORT"
        reportgenerator \
          -reports:"$REPORT" \
          -targetdir:coveragereport \
          -reporttypes:Opencover \
          -filefilters:-*.Generated.cs

    # ───────── Analyse SonarCloud avec le rapport OpenCover ─────────
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.cs.opencover.reportsPaths=coveragereport/coverage.opencover.xml
          -Dsonar.qualitygate.wait=true

    # ───────── Build & Push image Docker ─────────
    - name: Build & Push Docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_NAME:${{ github.sha }} .
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
        docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}

  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.29.2'

    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Update image tag
      run: |
        sed -i "s|aspnet-poc:local|$REGISTRY/$IMAGE_NAME:${{ github.sha }}|g" k8s/deployment.yaml

    - name: Deploy manifests
      run: kubectl apply -f k8s/

    - name: Wait for rollout
      run: kubectl rollout status deployment/api --timeout=120s
